package main

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AutoGenerated []struct {
	ID          int     `json:"id"`
	Title       string  `json:"title"`
	Price       float64 `json:"price"`
	Description string  `json:"description"`
	Category    string  `json:"category"`
	Image       string  `json:"image"`
	Rating      struct {
		Rate  float64 `json:"rate"`
		Count int     `json:"count"`
	} `json:"rating"`
}

type Product struct {
	Title    string  `json:"title"`
	Price    float64 `json:"price"`
	Category string  `json:"category"`
}

func fetchProducts(url string, ch chan<- []Product) {
	res, err := http.Get(url)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	defer res.Body.Close()

	var products AutoGenerated
	err = json.NewDecoder(res.Body).Decode(&products)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	var result []Product
	for _, p := range products {
		result = append(result, Product{
			Title:    p.Title,
			Price:    p.Price,
			Category: p.Category,
		})
	}

	ch <- result
}

func main() {
	url := "https://fakestoreapi.com/products"
	ch := make(chan []Product)
	go fetchProducts(url, ch)
	products := <-ch

	fmt.Println("Products:")
	for _, p := range products {
		fmt.Println("===")
		fmt.Printf("Title: %s \n", p.Title)
		fmt.Printf("Price: $%.2f \n", p.Price)
		fmt.Printf("Category: %s \n", p.Category)
		fmt.Println("===")
	}
}
